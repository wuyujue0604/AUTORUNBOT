import pandas as pd
import numpy as np
from config import get_runtime_config, debug_mode

# === üìå ÊäÄË°ìÊåáÊ®ôË®àÁÆóÂ∑•ÂÖ∑ ===

def calc_rsi(df, period=14):
    """
    Ë®àÁÆó RSI ÊåáÊ®ôÔºàÁõ∏Â∞çÂº∑Âº±ÊåáÊ®ôÔºâ
    :param df: Âê´Êúâ 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param period: Ë®àÁÆóÈÄ±ÊúüÔºåÈ†êË®≠14
    :return: RSI ÂÄºÂ∫èÂàóÔºàpandas SeriesÔºâ
    """
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calc_macd(df, fast=12, slow=26, signal=9):
    """
    Ë®àÁÆó MACD ÊåáÊ®ôÔºàÁßªÂãïÂπ≥ÂùáÊî∂ÊñÇÊì¥Êï£ÊåáÊ®ôÔºâ
    :param df: Âê´Êúâ 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param fast: Âø´ÈÄü EMA ÈÄ±ÊúüÔºåÈ†êË®≠12
    :param slow: ÊÖ¢ÈÄü EMA ÈÄ±ÊúüÔºåÈ†êË®≠26
    :param signal: ‰ø°ËôüÁ∑ö EMA ÈÄ±ÊúüÔºåÈ†êË®≠9
    :return: MACD Â∑ÆÈõ¢ÂÄºÂ∫èÂàóÔºàpandas SeriesÔºâ
    """
    ema_fast = df['close'].ewm(span=fast, adjust=False).mean()
    ema_slow = df['close'].ewm(span=slow, adjust=False).mean()
    macd_line = ema_fast - ema_slow
    signal_line = macd_line.ewm(span=signal, adjust=False).mean()
    hist = macd_line - signal_line
    return hist

def calc_ma(df, period=20):
    """
    Ë®àÁÆóÁßªÂãïÂπ≥ÂùáÁ∑öÔºàMAÔºâ
    :param df: Âê´Êúâ 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param period: ÈÄ±ÊúüÔºåÈ†êË®≠20
    :return: MA Â∫èÂàóÔºàpandas SeriesÔºâ
    """
    return df['close'].rolling(window=period).mean()

def calc_bollinger(df, period=20, dev=2):
    """
    Ë®àÁÆóÂ∏ÉÊûóÈÄöÈÅì‰∏ä‰∏ãËªå
    :param df: Âê´Êúâ 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param period: ÈÄ±ÊúüÔºåÈ†êË®≠20
    :param dev: Ê®ôÊ∫ñÂ∑ÆÂÄçÊï∏ÔºåÈ†êË®≠2
    :return: (upper_band, lower_band) ÂÖ©Ê¢ùÂ∫èÂàó
    """
    ma = calc_ma(df, period)
    std = df['close'].rolling(window=period).std()
    upper = ma + dev * std
    lower = ma - dev * std
    return upper, lower

def calc_adx(df, period=14):
    """
    Ë®àÁÆó ADX ÊåáÊ®ôÔºàÂπ≥ÂùáÊñπÂêëÊåáÊ®ôÔºâ
    :param df: Âê´Êúâ 'high', 'low', 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param period: ÈÄ±ÊúüÔºåÈ†êË®≠14
    :return: ADX Â∫èÂàóÔºàpandas SeriesÔºâ
    """
    plus_dm = df['high'].diff()
    minus_dm = df['low'].diff().abs()
    tr = df[['high', 'low', 'close']].max(axis=1) - df[['high', 'low', 'close']].min(axis=1)
    atr = tr.rolling(window=period).mean()
    # Èò≤Ê≠¢Èô§‰ª•0
    atr = atr.replace(0, np.nan)
    pdi = 100 * plus_dm.rolling(window=period).mean() / atr
    ndi = 100 * minus_dm.rolling(window=period).mean() / atr
    dx = 100 * (pdi - ndi).abs() / (pdi + ndi)
    adx = dx.rolling(window=period).mean()
    return adx

def calc_kdj(df, n=9, k_period=3, d_period=3):
    """
    Ë®àÁÆó KDJ ÊåáÊ®ô
    :param df: Âê´Êúâ 'high', 'low', 'close' Ê¨Ñ‰ΩçÁöÑ DataFrame
    :param n: RSV Ë®àÁÆóÈÄ±ÊúüÔºåÈ†êË®≠9
    :param k_period: K Á∑öÂπ≥ÊªëÈÄ±ÊúüÔºåÈ†êË®≠3
    :param d_period: D Á∑öÂπ≥ÊªëÈÄ±ÊúüÔºåÈ†êË®≠3
    :return: J Á∑öÂ∫èÂàóÔºàpandas SeriesÔºâ
    """
    low_min = df['low'].rolling(window=n).min()
    high_max = df['high'].rolling(window=n).max()
    denom = (high_max - low_min)
    # Èò≤Ê≠¢Èô§‰ª•0
    rsv = pd.Series(np.where(denom == 0, 0, 100 * (df['close'] - low_min) / denom), index=df.index)
    k = rsv.ewm(com=k_period-1, adjust=False).mean()
    d = k.ewm(com=d_period-1, adjust=False).mean()
    j = 3 * k - 2 * d
    return j

# === üìà ‰∏ªÈÇèËºØÔºöË®àÁÆóÊäÄË°ìÊåáÊ®ôÊñπÂêëËàá‰ø°ÂøÉ ===

def calculate_indicators(df, symbol, timeframe, disabled_indicators=None):
    """
    Ë®àÁÆóÂ§öÈ†ÖÊäÄË°ìÊåáÊ®ôÔºåÊï¥ÂêàÊàêË≤∑Ë≥£ÊñπÂêëËàá‰ø°ÂøÉÂàÜÊï∏„ÄÇ
    :param df: K Á∑ö DataFrame
    :param symbol: Âπ£Á®ÆÂêçÁ®±ÔºàÂ≠ó‰∏≤Ôºâ
    :param timeframe: ÊôÇÈñìÊ°ÜÊû∂ÔºàÂ≠ó‰∏≤Ôºâ
    :param disabled_indicators: Ë¶ÅÂÅúÁî®ÁöÑÊåáÊ®ôÊ∏ÖÂñÆ
    :return: dictÔºåÂåÖÂê´ symbol, direction, score, indicators Ë©≥Á¥∞Êï∏ÂÄº
    """
    if len(df) < 2:
        if debug_mode():
            print(f"[DEBUG] {symbol} {timeframe} K Á∑öË≥áÊñô‰∏çË∂≥ÔºåË∑≥ÈÅéÊåáÊ®ôË®àÁÆó")
        return {
            "symbol": symbol,
            "direction": "none",
            "score": 0,
            "indicators": {}
        }

    config = get_runtime_config()
    disabled = disabled_indicators or config.get("DISABLED_INDICATORS", [])
    weights = config.get("INDICATOR_WEIGHTS", {})

    latest = df.iloc[-1]
    indicators = {}
    score = 0
    direction_votes = {"buy": 0, "sell": 0}

    # RSI ÊåáÊ®ôÂà§Êñ∑
    if "RSI" not in disabled:
        rsi = calc_rsi(df)
        rsi_val = rsi.iloc[-1]
        if pd.notna(rsi_val):
            indicators["RSI"] = round(rsi_val, 2)
            if rsi_val > 70:
                direction_votes["sell"] += 1
                score += weights.get("RSI", 1.0)
            elif rsi_val < 30:
                direction_votes["buy"] += 1
                score += weights.get("RSI", 1.0)

    # MACD ÊåáÊ®ôÂà§Êñ∑
    if "MACD" not in disabled:
        macd = calc_macd(df)
        macd_val = macd.iloc[-1]
        if pd.notna(macd_val):
            indicators["MACD"] = round(macd_val, 4)
            if macd_val > 0:
                direction_votes["buy"] += 1
                score += weights.get("MACD", 1.0)
            else:
                direction_votes["sell"] += 1
                score += weights.get("MACD", 1.0)

    # MA ÊåáÊ®ôÂà§Êñ∑
    if "MA" not in disabled:
        ma = calc_ma(df)
        ma_val = ma.iloc[-1]
        if pd.notna(ma_val):
            indicators["MA"] = round(ma_val, 4)
            if latest["close"] > ma_val:
                direction_votes["buy"] += 1
                score += weights.get("MA", 1.0)
            else:
                direction_votes["sell"] += 1
                score += weights.get("MA", 1.0)

    # BOLL ÊåáÊ®ôÂà§Êñ∑
    if "BOLL" not in disabled:
        upper, lower = calc_bollinger(df)
        upper_val = upper.iloc[-1]
        lower_val = lower.iloc[-1]
        if pd.notna(upper_val) and pd.notna(lower_val):
            indicators["BOLL_UP"] = round(upper_val, 4)
            indicators["BOLL_LO"] = round(lower_val, 4)
            if latest["close"] < lower_val:
                direction_votes["buy"] += 1
                score += weights.get("BOLL", 1.0)
            elif latest["close"] > upper_val:
                direction_votes["sell"] += 1
                score += weights.get("BOLL", 1.0)

    # ADX ÊåáÊ®ôÂà§Êñ∑
    if "ADX" not in disabled:
        adx = calc_adx(df)
        adx_val = adx.iloc[-1]
        if pd.notna(adx_val):
            indicators["ADX"] = round(adx_val, 2)
            if adx_val > 25:
                direction_votes["buy"] += 1
                score += weights.get("ADX", 1.0)

    # KDJ ÊåáÊ®ôÂà§Êñ∑
    if "KDJ" not in disabled:
        kdj = calc_kdj(df)
        kdj_val = kdj.iloc[-1]
        if pd.notna(kdj_val):
            indicators["KDJ"] = round(kdj_val, 2)
            if kdj_val < 20:
                direction_votes["buy"] += 1
                score += weights.get("KDJ", 1.0)
            elif kdj_val > 80:
                direction_votes["sell"] += 1
                score += weights.get("KDJ", 1.0)

    # Á∂úÂêàÊäïÁ•®Ê±∫ÂÆöÊñπÂêë
    direction = "none"
    if direction_votes["buy"] > direction_votes["sell"]:
        direction = "buy"
    elif direction_votes["sell"] > direction_votes["buy"]:
        direction = "sell"

    if debug_mode():
        print(f"[DEBUG] {symbol} ÊñπÂêëÔºö{direction} | ‰ø°ÂøÉÂàÜÊï∏Ôºö{round(score,2)}")

    return {
        "symbol": symbol,
        "direction": direction,
        "score": round(score, 2),
        "indicators": indicators
    }